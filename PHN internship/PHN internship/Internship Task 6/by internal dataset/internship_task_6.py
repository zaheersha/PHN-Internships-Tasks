# -*- coding: utf-8 -*-
"""Internship_Task_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1In9Cnsb3ZKt4D_K3AplG37TLYFGjgksb

# Machine Learning for Linear Equation Prediction

---


**Description:** You are tasked with developing a machine learning model that can predict linear
equations based on a given dataset. The dataset consists of pairs of input variables and
corresponding output values, representing different linear equations. Your goal is to train a
model that can accurately predict the coefficients of a linear equation given new input values.

---


**Requirements:**
Dataset Generation:

*   Generate a dataset of multiple linear equations, each represented by a pair of input
variables and the corresponding output value.

*   Ensure that the dataset includes a variety of linear equations with different slopes and
intercepts.
*   You can use a random generator or predefined equations to create the dataset.

---
**Data Pre-processing:**

*   Perform any necessary pre-processing steps on the dataset, such as data normalization or
standardization, to ensure better model performance.



---
"""

import numpy as np
import pandas as pd

"""# **Dataset Generation**"""

num_students = 1000

hours = np.random.randint(1, 10, size=num_students)
age = np.random.randint(15, 25, size=num_students)
internet = np.random.randint(0, 2, size=num_students)  
# 0: No internet, 1: Internet available

random_noise = np.random.randn(num_students) * 5 
marks = 2 * hours + 3 * age + 5 * internet + random_noise

dataset = pd.DataFrame({'Hours': hours, 'Age': age, 'Internet': internet, 'Marks': marks})

print(dataset.shape)
print(dataset.head())
print(dataset.tail())

import matplotlib.pyplot as plt

# Filter the dataset for students with more than 20 marks
filtered_dataset = dataset[dataset['Marks'] > 20]

# Plotting a histogram
plt.hist(filtered_dataset['Marks'], bins=10)
plt.xlabel('Marks')
plt.ylabel('Number of Students')
plt.title('Histogram of Students with More than 20 Marks')
plt.show()

# Plotting a scatter plot
plt.scatter(filtered_dataset['Age'], filtered_dataset['Hours'])
plt.xlabel('Age')
plt.ylabel('Hours')
plt.title('Scatter Plot of Students with More than 20 Marks')
plt.show()

import matplotlib.pyplot as plt

# Define the age groups divisible by 5
age_groups = [15, 20, 25]

# Create subplots for each age group - histogram
fig, axs = plt.subplots(len(age_groups), 1, figsize=(3, 9), sharey=True, tight_layout=True)

for i, age_group in enumerate(age_groups):
    filtered_dataset = dataset[(dataset['Age'] % 5 == 0) & (dataset['Age'] == age_group)]
    axs[i].hist(filtered_dataset['Marks'], bins=10)
    axs[i].set_xlabel('Marks')
    axs[i].set_ylabel('Number of Students')
    axs[i].set_title(f'Histogram of Students (Age: {age_group})')

plt.show()

# Create subplots for each age group - scatterplot

fig, axs = plt.subplots(len(age_groups), 1, figsize=(3, 9), sharey=True, tight_layout=True)

for i, age_group in enumerate(age_groups):
    filtered_dataset = dataset[dataset['Age'] % 5 == 0]
    filtered_dataset_age_group = filtered_dataset[filtered_dataset['Age'] == age_group]
    axs[i].scatter(filtered_dataset_age_group['Hours'], filtered_dataset_age_group['Marks'])
    axs[i].set_xlabel('Hours')
    axs[i].set_ylabel('Marks')
    axs[i].set_title(f'Scatter Plot (Age: {age_group})')

plt.show()

"""# **Data Pre-processing**"""

#segrate dataset into input x and output y
# input as expect last column remaining coloumns are outputs
X = dataset.iloc[:,:-1].values
print(X.shape)
X

#segrate dataset into input x and output y
Y = dataset.iloc[:,-1].values
Y

"""# **Representing linear equations.**"""

from sklearn.linear_model import LinearRegression

#training the data set using LR
model = LinearRegression()
model.fit(X,Y)

"""#*OUTPUT *"""

#predict 
a=[[9,20,1]]
PredictemodelResult = model.predict(a)
print(PredictemodelResult)

"""# **(or) Giving data through User**

# **OUTPUT **
"""

#predict 

hours = int(input("enter hours  : "))
age = int(input("enter  age : "))
internet = int(input("enter internet is available or not (0/1)  : "))
a=[[hours,age,internet]]
#a=[[9,20,1]]
PredictemodelResult = model.predict(a)
print(PredictemodelResult)

"""AKULA ZAHEER SHA

---


a.zaheersha@gmail.com

---


9494333702
"""